
Led00003.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000657  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000583  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000266  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030f  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000142b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:



int main(void)
{
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //set C0-C7 as output	
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
	DDRD &=~ ((1<<2)|(1<<3));										   //set D2-D3 as input
  82:	81 b3       	in	r24, 0x11	; 17
  84:	83 7f       	andi	r24, 0xF3	; 243
  86:	81 bb       	out	0x11, r24	; 17
    {
		if (bit_is_clear (PIND,2))
		{
			for (i=0;i<=8;i++)
			{	
				PORTC = (1<<i);
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
		
		if (bit_is_clear (PIND,3))
		{
			for (i=0;i<=8;i++)
			{
				PORTC = (128>>i);
  8c:	40 e8       	ldi	r20, 0x80	; 128
  8e:	50 e0       	ldi	r21, 0x00	; 0
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //set C0-C7 as output	
	DDRD &=~ ((1<<2)|(1<<3));										   //set D2-D3 as input
    
    while (1) 
    {
		if (bit_is_clear (PIND,2))
  90:	82 99       	sbic	0x10, 2	; 16
  92:	22 c0       	rjmp	.+68     	; 0xd8 <main+0x5c>
		{
			for (i=0;i<=8;i++)
  94:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  98:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
			{	
				PORTC = (1<<i);
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x2c>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <main+0x28>
  ac:	65 bb       	out	0x15, r22	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	7f ef       	ldi	r23, 0xFF	; 255
  b0:	81 ee       	ldi	r24, 0xE1	; 225
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	71 50       	subi	r23, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x38>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x42>
  be:	00 00       	nop
    
    while (1) 
    {
		if (bit_is_clear (PIND,2))
		{
			for (i=0;i<=8;i++)
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  d2:	89 30       	cpi	r24, 0x09	; 9
  d4:	91 05       	cpc	r25, r1
  d6:	20 f3       	brcs	.-56     	; 0xa0 <main+0x24>
				PORTC = (1<<i);
				_delay_ms (200);	
			}
		}
		
		if (bit_is_clear (PIND,3))
  d8:	83 99       	sbic	0x10, 3	; 16
  da:	da cf       	rjmp	.-76     	; 0x90 <main+0x14>
		{
			for (i=0;i<=8;i++)
  dc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
			{
				PORTC = (128>>i);
  e8:	ba 01       	movw	r22, r20
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x74>
  ec:	75 95       	asr	r23
  ee:	67 95       	ror	r22
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x70>
  f4:	65 bb       	out	0x15, r22	; 21
  f6:	7f ef       	ldi	r23, 0xFF	; 255
  f8:	81 ee       	ldi	r24, 0xE1	; 225
  fa:	94 e0       	ldi	r25, 0x04	; 4
  fc:	71 50       	subi	r23, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x80>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x8a>
 106:	00 00       	nop
			}
		}
		
		if (bit_is_clear (PIND,3))
		{
			for (i=0;i<=8;i++)
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 10c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 11a:	89 30       	cpi	r24, 0x09	; 9
 11c:	91 05       	cpc	r25, r1
 11e:	20 f3       	brcs	.-56     	; 0xe8 <main+0x6c>
 120:	b7 cf       	rjmp	.-146    	; 0x90 <main+0x14>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
