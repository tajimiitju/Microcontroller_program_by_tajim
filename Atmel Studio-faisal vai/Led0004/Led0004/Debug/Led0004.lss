
Led0004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000657  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000583  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028a  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030d  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  000013e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:



int main(void)
{
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //set C0-C7 as output
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
	DDRD &=~ ((1<<2)|(1<<3));										   //set D2-D3 as input
  82:	81 b3       	in	r24, 0x11	; 17
  84:	83 7f       	andi	r24, 0xF3	; 243
  86:	81 bb       	out	0x11, r24	; 17
				if (bit_is_clear(PIND,3))
				{
					break;
				}
				
				PORTC = (1<<i);
  88:	e0 e6       	ldi	r30, 0x60	; 96
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
				}
				if (bit_is_clear(PIND,2))
				{
					break;
				}
				PORTC = (128>>i);
  90:	40 e8       	ldi	r20, 0x80	; 128
  92:	50 e0       	ldi	r21, 0x00	; 0
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //set C0-C7 as output
	DDRD &=~ ((1<<2)|(1<<3));										   //set D2-D3 as input
	
	while (1)
	{
		if (bit_is_clear (PIND,2))
  94:	82 99       	sbic	0x10, 2	; 16
  96:	2a c0       	rjmp	.+84     	; 0xec <main+0x70>
		{
			for (i=0;i<=8;i++)
  98:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  9c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  a0:	06 c0       	rjmp	.+12     	; 0xae <main+0x32>
			{
				if (i==8)
  a2:	08 97       	sbiw	r24, 0x08	; 8
  a4:	21 f4       	brne	.+8      	; 0xae <main+0x32>
				{
					i=0;
  a6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				}
				if (bit_is_clear(PIND,3))
  ae:	83 9b       	sbis	0x10, 3	; 16
  b0:	1d c0       	rjmp	.+58     	; 0xec <main+0x70>
				{
					break;
				}
				
				PORTC = (1<<i);
  b2:	c9 01       	movw	r24, r18
  b4:	00 80       	ld	r0, Z
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x40>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x3c>
  c0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	6f ef       	ldi	r22, 0xFF	; 255
  c4:	81 ee       	ldi	r24, 0xE1	; 225
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	61 50       	subi	r22, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x4c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x56>
  d2:	00 00       	nop
	
	while (1)
	{
		if (bit_is_clear (PIND,2))
		{
			for (i=0;i<=8;i++)
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  e6:	89 30       	cpi	r24, 0x09	; 9
  e8:	91 05       	cpc	r25, r1
  ea:	d8 f2       	brcs	.-74     	; 0xa2 <main+0x26>
				_delay_ms (200);
				
			}
		}
		
		if (bit_is_clear (PIND,3))
  ec:	83 99       	sbic	0x10, 3	; 16
  ee:	d2 cf       	rjmp	.-92     	; 0x94 <main+0x18>
		{
			for (i=0;i<=8;i++)
  f0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  f8:	06 c0       	rjmp	.+12     	; 0x106 <main+0x8a>
			{
				if (i==8)
  fa:	08 97       	sbiw	r24, 0x08	; 8
  fc:	21 f4       	brne	.+8      	; 0x106 <main+0x8a>
				{
					i=0;
  fe:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 102:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				}
				if (bit_is_clear(PIND,2))
 106:	82 9b       	sbis	0x10, 2	; 16
 108:	c5 cf       	rjmp	.-118    	; 0x94 <main+0x18>
				{
					break;
				}
				PORTC = (128>>i);
 10a:	ca 01       	movw	r24, r20
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x98>
 110:	95 95       	asr	r25
 112:	87 95       	ror	r24
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <main+0x94>
 118:	85 bb       	out	0x15, r24	; 21
 11a:	6f ef       	ldi	r22, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	61 50       	subi	r22, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xa4>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xae>
 12a:	00 00       	nop
			}
		}
		
		if (bit_is_clear (PIND,3))
		{
			for (i=0;i<=8;i++)
 12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 130:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 13a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 13e:	89 30       	cpi	r24, 0x09	; 9
 140:	91 05       	cpc	r25, r1
 142:	d8 f2       	brcs	.-74     	; 0xfa <main+0x7e>
 144:	a7 cf       	rjmp	.-178    	; 0x94 <main+0x18>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
