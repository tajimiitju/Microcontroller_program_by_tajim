
bluetooth_speed_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d0  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000612  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
// atmega32 PD1/TXD/15 = hc05 RXD
// no connection need in STATE and EN pin

int main(void)
{
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //Set Data_Direction_Resistor_Of_PORTD_Bit_7
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	
	USART_Init();//Initializing UART
  72:	0e 94 55 00 	call	0xaa	; 0xaa <USART_Init>
	
	while(1)
	{	
		unsigned char BT_Data = receiveByte();
  76:	0e 94 5d 00 	call	0xba	; 0xba <receiveByte>
		if(BT_Data == 'a')
  7a:	81 36       	cpi	r24, 0x61	; 97
  7c:	11 f4       	brne	.+4      	; 0x82 <main+0x16>
		{			
			// port c 1 on
			PORTC |= (1<<1);
  7e:	a9 9a       	sbi	0x15, 1	; 21
  80:	fa cf       	rjmp	.-12     	; 0x76 <main+0xa>
		}
		else if(BT_Data == 'b')
  82:	82 36       	cpi	r24, 0x62	; 98
  84:	11 f4       	brne	.+4      	; 0x8a <main+0x1e>
		{
			PORTC &= ~(1<<1);
  86:	a9 98       	cbi	0x15, 1	; 21
  88:	f6 cf       	rjmp	.-20     	; 0x76 <main+0xa>
		}
		if(BT_Data == 'c')
  8a:	83 36       	cpi	r24, 0x63	; 99
  8c:	11 f4       	brne	.+4      	; 0x92 <main+0x26>
		{
			PORTC |= (1<<2);
  8e:	aa 9a       	sbi	0x15, 2	; 21
  90:	f2 cf       	rjmp	.-28     	; 0x76 <main+0xa>
		}
		else if(BT_Data == 'd')
  92:	84 36       	cpi	r24, 0x64	; 100
  94:	11 f4       	brne	.+4      	; 0x9a <main+0x2e>
		{
			PORTC &= ~(1<<2);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	ee cf       	rjmp	.-36     	; 0x76 <main+0xa>
		}
		if(BT_Data == 'e')
  9a:	85 36       	cpi	r24, 0x65	; 101
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x36>
		{
			PORTC |= (1<<3);
  9e:	ab 9a       	sbi	0x15, 3	; 21
  a0:	ea cf       	rjmp	.-44     	; 0x76 <main+0xa>
		}
		else if(BT_Data == 'f')
  a2:	86 36       	cpi	r24, 0x66	; 102
  a4:	41 f7       	brne	.-48     	; 0x76 <main+0xa>
		{
			PORTC &= ~(1<<3);
  a6:	ab 98       	cbi	0x15, 3	; 21
  a8:	e6 cf       	rjmp	.-52     	; 0x76 <main+0xa>

000000aa <USART_Init>:

void transmitByte(unsigned char data)
{
	while((UCSRA & (1 << UDRE)) == 0) {}; //Do nothing until UDR is ready for more data to be written to it
	
	UDR = data;
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	80 bd       	out	0x20, r24	; 32
  b2:	10 bc       	out	0x20, r1	; 32
  b4:	83 e3       	ldi	r24, 0x33	; 51
  b6:	89 b9       	out	0x09, r24	; 9
  b8:	08 95       	ret

000000ba <receiveByte>:

unsigned char receiveByte(void)
{
	char data;
	
	while((UCSRA & (1 << RXC)) == 0) {}; //Do nothing until data have been received and is ready to be read from UDR
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <receiveByte>
	
	data = UDR;
  be:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
