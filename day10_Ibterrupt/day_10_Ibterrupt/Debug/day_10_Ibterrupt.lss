
day_10_Ibterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000676  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c0  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c2  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034d  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 49 00 	call	0x92	; 0x92 <main>
  74:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Int_INT0>:
}

// INT0 = PD2
void Int_INT0(void)
{
	sei(); //enable global interrupt
  7c:	78 94       	sei
	MCUCR &= ~(1<<ISC00); //
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC01); //
  84:	85 b7       	in	r24, 0x35	; 53
  86:	82 60       	ori	r24, 0x02	; 2
  88:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);// external interrupt 0 enabled
  8a:	8b b7       	in	r24, 0x3b	; 59
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	8b bf       	out	0x3b, r24	; 59
  90:	08 95       	ret

00000092 <main>:
int i;

int main(void)
{
    /* Replace with your application code */
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //set C0-C7 as output
  92:	84 b3       	in	r24, 0x14	; 20
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 bb       	out	0x14, r24	; 20
	
    Int_INT0();
  98:	0e 94 3e 00 	call	0x7c	; 0x7c <Int_INT0>
	while (1) 
    {
		for(i=0;i<=7;i++)
		{
			PORTC = (1<<i);
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //set C0-C7 as output
	
    Int_INT0();
	while (1) 
    {
		for(i=0;i<=7;i++)
  a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTC = (1<<i);
  ac:	a9 01       	movw	r20, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x22>
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <main+0x1e>
  b8:	45 bb       	out	0x15, r20	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	5f ef       	ldi	r21, 0xFF	; 255
  bc:	81 ee       	ldi	r24, 0xE1	; 225
  be:	94 e0       	ldi	r25, 0x04	; 4
  c0:	51 50       	subi	r21, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x38>
  ca:	00 00       	nop
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //set C0-C7 as output
	
    Int_INT0();
	while (1) 
    {
		for(i=0;i<=7;i++)
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	91 05       	cpc	r25, r1
  e2:	24 f3       	brlt	.-56     	; 0xac <main+0x1a>
  e4:	dd cf       	rjmp	.-70     	; 0xa0 <main+0xe>

000000e6 <__vector_1>:
	MCUCR |= (1<<ISC01); //
	GICR |= (1<<INT0);// external interrupt 0 enabled
}

ISR(INT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	for(i=7;i>=0;i--)
  fc:	87 e0       	ldi	r24, 0x07	; 7
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 104:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	{
		PORTC = (1<<i);
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	a9 01       	movw	r20, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__vector_1+0x2e>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <__vector_1+0x2a>
 118:	45 bb       	out	0x15, r20	; 21
 11a:	5f ef       	ldi	r21, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	51 50       	subi	r21, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <__vector_1+0x3a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__vector_1+0x44>
 12a:	00 00       	nop
	GICR |= (1<<INT0);// external interrupt 0 enabled
}

ISR(INT0_vect)
{
	for(i=7;i>=0;i--)
 12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 130:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 13a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 13e:	99 23       	and	r25, r25
 140:	2c f7       	brge	.-54     	; 0x10c <__vector_1+0x26>
	{
		PORTC = (1<<i);
		_delay_ms(200);
	}
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
