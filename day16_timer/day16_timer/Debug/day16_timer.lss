
day16_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000016e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ba  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000547  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022a  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002df  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001277  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 77 00 	call	0xee	; 0xee <main>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer_0_Init>:

int count = 0;

void Timer_0_Init(void)
{
	TCCR0 |= (1<<CS00); // no prescalling
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<CS01);
  82:	83 b7       	in	r24, 0x33	; 51
  84:	8d 7f       	andi	r24, 0xFD	; 253
  86:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<CS02);
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 &= ~(1<<WGM00); //timer normal mode
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	8f 7b       	andi	r24, 0xBF	; 191
  92:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM01); //timer normal mode
  94:	83 b7       	in	r24, 0x33	; 51
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1<<TOIE0); //overflow int enable
  9a:	89 b7       	in	r24, 0x39	; 57
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0; // clear time counter
  a0:	12 be       	out	0x32, r1	; 50
	sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	count++;
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	// 8000000/256 =31250
	if(count==31250)
  c8:	82 31       	cpi	r24, 0x12	; 18
  ca:	9a 47       	sbci	r25, 0x7A	; 122
  cc:	41 f4       	brne	.+16     	; 0xde <__vector_11+0x38>
	{
		PORTC ^= (1<<0);
  ce:	95 b3       	in	r25, 0x15	; 21
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	89 27       	eor	r24, r25
  d4:	85 bb       	out	0x15, r24	; 21
		count =0;
  d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <main>:

int main(void)
{
	Timer_0_Init();
  ee:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer_0_Init>
	DDRC |= (1<<0);
  f2:	a0 9a       	sbi	0x14, 0	; 20
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x6>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
