
day22_mc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b2  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068f  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003af  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036e  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "USART.h"

int main(void)
{
    /* Replace with your application code */
	DDRC |= 0xFF;
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 bb       	out	0x14, r24	; 20
	USART_Init();
  88:	0e 94 6d 00 	call	0xda	; 0xda <USART_Init>
			{
				newData = USART_Receive_Byte();
				if (newData == 'n')
				{
					USART_Transmit_String("Light ON\r\n");
					PORTC = 0xFF;	
  8c:	cf ef       	ldi	r28, 0xFF	; 255
    /* Replace with your application code */
	DDRC |= 0xFF;
	USART_Init();
    while (1) 
    {
		char newData = USART_Receive_Byte();
  8e:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Receive_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	ef e6       	ldi	r30, 0x6F	; 111
  94:	f7 e1       	ldi	r31, 0x17	; 23
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x14>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1a>
  9c:	00 00       	nop
		_delay_ms(3);
		if (newData>0)
  9e:	88 23       	and	r24, r24
  a0:	b1 f3       	breq	.-20     	; 0x8e <main+0xc>
		{
			if (newData == 'o')
  a2:	8f 36       	cpi	r24, 0x6F	; 111
  a4:	91 f4       	brne	.+36     	; 0xca <main+0x48>
			{
				newData = USART_Receive_Byte();
  a6:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Receive_Byte>
				if (newData == 'n')
  aa:	8e 36       	cpi	r24, 0x6E	; 110
  ac:	31 f4       	brne	.+12     	; 0xba <main+0x38>
				{
					USART_Transmit_String("Light ON\r\n");
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit_String>
					PORTC = 0xFF;	
  b6:	c5 bb       	out	0x15, r28	; 21
  b8:	ea cf       	rjmp	.-44     	; 0x8e <main+0xc>
				}
				else if(newData == 'f')
  ba:	86 36       	cpi	r24, 0x66	; 102
  bc:	41 f7       	brne	.-48     	; 0x8e <main+0xc>
				{
					USART_Transmit_String("Light OFF\r\n");
  be:	8b e6       	ldi	r24, 0x6B	; 107
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit_String>
					PORTC = 0x00;
  c6:	15 ba       	out	0x15, r1	; 21
  c8:	e2 cf       	rjmp	.-60     	; 0x8e <main+0xc>
				}
			}
			else if(newData == 'b')
  ca:	82 36       	cpi	r24, 0x62	; 98
  cc:	01 f7       	brne	.-64     	; 0x8e <main+0xc>
			{
				USART_Transmit_String("Light OFF\r\n");
  ce:	8b e6       	ldi	r24, 0x6B	; 107
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit_String>
				PORTC = 0x00;
  d6:	15 ba       	out	0x15, r1	; 21
  d8:	da cf       	rjmp	.-76     	; 0x8e <main+0xc>

000000da <USART_Init>:
void USART_Init(void)
{
	/*Set baud rate */
	//UBRRH = (unsigned char)(baud>>8);
	//UBRRL = (unsigned char)baud;
	UBRRH = (UART_UBBR_VALUE >> 8); //8 bar right shift kore 10 bit er prothom dutake MSB te rakhlo
  da:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_UBBR_VALUE; //last 8ta bose jabe
  dc:	83 e3       	ldi	r24, 0x33	; 51
  de:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter 
	UCSRB = (1<<RXEN)|(1<<TXEN);
  e0:	88 e1       	ldi	r24, 0x18	; 24
  e2:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);
  e4:	8e e8       	ldi	r24, 0x8E	; 142
  e6:	80 bd       	out	0x20, r24	; 32
  e8:	08 95       	ret

000000ea <USART_Transmit_Byte>:


void USART_Transmit_Byte( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE))); // bit in not set ... checking
  ea:	5d 9b       	sbis	0x0b, 5	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <USART_Transmit_Byte>
		UCSRB |= (1<<TXB8);		
	}
	*/
	
	/* Put data into buffer, sends the data */
	UDR = data;
  ee:	8c b9       	out	0x0c, r24	; 12
  f0:	08 95       	ret

000000f2 <USART_Receive_Byte>:
}

unsigned char USART_Receive_Byte( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
  f2:	5f 9b       	sbis	0x0b, 7	; 11
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <USART_Receive_Byte>
	/* Get and return received data from buffer */
	return UDR;
  f6:	8c b1       	in	r24, 0x0c	; 12
}
  f8:	08 95       	ret

000000fa <USART_Transmit_String>:

void USART_Transmit_String(char *string)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	while(*string)
 100:	88 81       	ld	r24, Y
 102:	88 23       	and	r24, r24
 104:	31 f0       	breq	.+12     	; 0x112 <USART_Transmit_String+0x18>
 106:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit_Byte(*string++);
 108:	0e 94 75 00 	call	0xea	; 0xea <USART_Transmit_Byte>
	return UDR;
}

void USART_Transmit_String(char *string)
{
	while(*string)
 10c:	89 91       	ld	r24, Y+
 10e:	81 11       	cpse	r24, r1
 110:	fb cf       	rjmp	.-10     	; 0x108 <USART_Transmit_String+0xe>
	{
		USART_Transmit_Byte(*string++);
	}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
