
LED_BLINK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062a  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031d  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRA |= (1<<0); //Set Data_Direction_Resistor_Of_PORTA_Bit_0
  6c:	d0 9a       	sbi	0x1a, 0	; 26
	DDRD |= (1<<0); //Set Data_Direction_Resistor_Of_PORTD_Bit_0
  6e:	88 9a       	sbi	0x11, 0	; 17
	DDRD |= (1<<1); //Set Data_Direction_Resistor_Of_PORTD_Bit_1
  70:	89 9a       	sbi	0x11, 1	; 17
	DDRD |= (1<<2); //Set Data_Direction_Resistor_Of_PORTD_Bit_2
  72:	8a 9a       	sbi	0x11, 2	; 17
	DDRD |= (1<<3); //Set Data_Direction_Resistor_Of_PORTD_Bit_3
  74:	8b 9a       	sbi	0x11, 3	; 17
	DDRD |= (1<<4); //Set Data_Direction_Resistor_Of_PORTD_Bit_4
  76:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= (1<<5); //Set Data_Direction_Resistor_Of_PORTD_Bit_5
  78:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |= (1<<6); //Set Data_Direction_Resistor_Of_PORTD_Bit_6
  7a:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1<<7); //Set Data_Direction_Resistor_Of_PORTD_Bit_7
  7c:	8f 9a       	sbi	0x11, 7	; 17
	
	while(1)
	{
		PORTA |= (1<<0); //PORTA_Bit_0 goes to HIGH.
  7e:	d8 9a       	sbi	0x1b, 0	; 27
		PORTD |= (1<<0); //PORTD goes to HIGH.
  80:	90 9a       	sbi	0x12, 0	; 18
		PORTD |= (1<<1); //PORTD goes to HIGH.
  82:	91 9a       	sbi	0x12, 1	; 18
		PORTD |= (1<<2); //PORTD goes to HIGH.
  84:	92 9a       	sbi	0x12, 2	; 18
		PORTD |= (1<<3); //PORTD goes to HIGH.
  86:	93 9a       	sbi	0x12, 3	; 18
		PORTD |= (1<<4); //PORTD goes to HIGH.
  88:	94 9a       	sbi	0x12, 4	; 18
		PORTD |= (1<<5); //PORTD goes to HIGH.
  8a:	95 9a       	sbi	0x12, 5	; 18
		PORTD |= (1<<6); //PORTD goes to HIGH.
  8c:	96 9a       	sbi	0x12, 6	; 18
		PORTD |= (1<<7); //PORTD goes to HIGH.
  8e:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	80 e7       	ldi	r24, 0x70	; 112
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
		_delay_ms(100); //Wait for 100ms
		
		PORTA &= ~(1<<0); //PORTA_Bit_0 goes to LOW.
  a2:	d8 98       	cbi	0x1b, 0	; 27
		PORTD &= ~(1<<0); //PORTD goes to LOW.
  a4:	90 98       	cbi	0x12, 0	; 18
		PORTD &= ~(1<<1); //PORTD goes to LOW.
  a6:	91 98       	cbi	0x12, 1	; 18
		PORTD &= ~(1<<2); //PORTD goes to LOW.
  a8:	92 98       	cbi	0x12, 2	; 18
		PORTD &= ~(1<<3); //PORTD goes to LOW.
  aa:	93 98       	cbi	0x12, 3	; 18
		PORTD &= ~(1<<4); //PORTD goes to LOW.
  ac:	94 98       	cbi	0x12, 4	; 18
		PORTD &= ~(1<<5); //PORTD goes to LOW.
  ae:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~(1<<6); //PORTD goes to LOW.
  b0:	96 98       	cbi	0x12, 6	; 18
		PORTD &= ~(1<<7); //PORTD goes to LOW.
  b2:	97 98       	cbi	0x12, 7	; 18
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	80 e7       	ldi	r24, 0x70	; 112
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
  c6:	db cf       	rjmp	.-74     	; 0x7e <main+0x12>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
