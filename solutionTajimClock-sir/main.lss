
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000af6  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000b2  008000b2  00000bdc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000115  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000786  00000000  00000000  00000d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a0  00000000  00000000  000014b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000745  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bc  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026d  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000023b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  8a:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer_0_Init>:


void Timer_0_Init(void)
{
	// TCCR1 for 16 bit
	TCCR1B &= ~(1<<CS10); // prescalling 256 - 001
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS12);
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	8e bd       	out	0x2e, r24	; 46
	
	// sob gula 0 korle wave form generation normal mode
	TCCR1B &= ~(1<<WGM10); //timer normal mode
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM11); //timer normal mode
  aa:	8e b5       	in	r24, 0x2e	; 46
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM12); //timer normal mode
  b0:	8e b5       	in	r24, 0x2e	; 46
  b2:	87 7f       	andi	r24, 0xF7	; 247
  b4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13); //timer normal mode
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	8f 7e       	andi	r24, 0xEF	; 239
  ba:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK |= (1<<OCIE1A); //output compare match enable
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0; // clear time counter
  c2:	1d bc       	out	0x2d, r1	; 45
  c4:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 31250;
  c6:	82 e1       	ldi	r24, 0x12	; 18
  c8:	9a e7       	ldi	r25, 0x7A	; 122
  ca:	9b bd       	out	0x2b, r25	; 43
  cc:	8a bd       	out	0x2a, r24	; 42
	sei(); // set enable interrupt
  ce:	78 94       	sei
}
  d0:	08 95       	ret

000000d2 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	s++;
  e4:	80 91 b8 00 	lds	r24, 0x00B8
  e8:	90 91 b9 00 	lds	r25, 0x00B9
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 b9 00 	sts	0x00B9, r25
  f2:	80 93 b8 00 	sts	0x00B8, r24
  f6:	20 91 b6 00 	lds	r18, 0x00B6
  fa:	30 91 b7 00 	lds	r19, 0x00B7
	
	if(s>=60)
  fe:	cc 97       	sbiw	r24, 0x3c	; 60
 100:	58 f0       	brcs	.+22     	; 0x118 <__vector_7+0x46>
	{
		s=0;
 102:	10 92 b9 00 	sts	0x00B9, r1
 106:	10 92 b8 00 	sts	0x00B8, r1
		m++;
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	30 93 b7 00 	sts	0x00B7, r19
 112:	20 93 b6 00 	sts	0x00B6, r18
 116:	17 c0       	rjmp	.+46     	; 0x146 <__vector_7+0x74>
 118:	80 91 b4 00 	lds	r24, 0x00B4
 11c:	90 91 b5 00 	lds	r25, 0x00B5
	}
	else if(m>=60)
 120:	2c 33       	cpi	r18, 0x3C	; 60
 122:	31 05       	cpc	r19, r1
 124:	50 f0       	brcs	.+20     	; 0x13a <__vector_7+0x68>
	{
		m=0;
 126:	10 92 b7 00 	sts	0x00B7, r1
 12a:	10 92 b6 00 	sts	0x00B6, r1
		h++;
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 b5 00 	sts	0x00B5, r25
 134:	80 93 b4 00 	sts	0x00B4, r24
 138:	06 c0       	rjmp	.+12     	; 0x146 <__vector_7+0x74>
	}
	else if(h>=12)
 13a:	0c 97       	sbiw	r24, 0x0c	; 12
 13c:	20 f0       	brcs	.+8      	; 0x146 <__vector_7+0x74>
	{
		h=0;
 13e:	10 92 b5 00 	sts	0x00B5, r1
 142:	10 92 b4 00 	sts	0x00B4, r1
	}
	TCNT1 = 0; // clear time counter
 146:	1d bc       	out	0x2d, r1	; 45
 148:	1c bc       	out	0x2c, r1	; 44
	
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:


int main(void)
{
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
	LCDInit();
 16a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCDInit>
	Timer_0_Init(); // initilizing timer = 0
 16e:	0e 94 49 00 	call	0x92	; 0x92 <Timer_0_Init>
	//int hc=0,mc=0,sc=0;
	while (1) 
    {
		sprintf(line, "  %.2u : %.2u : %.2u", h, m, s);
 172:	cc eb       	ldi	r28, 0xBC	; 188
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	90 e6       	ldi	r25, 0x60	; 96
 178:	c9 2e       	mov	r12, r25
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	d9 2e       	mov	r13, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 17e:	1a e1       	ldi	r17, 0x1A	; 26
				
				sprintf(line, "SET hour: ");
				LCDGotoXY(1,1);
				LCDString(line);
				
				sprintf(line, "%.2u",h);
 180:	81 e9       	ldi	r24, 0x91	; 145
 182:	e8 2e       	mov	r14, r24
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	f8 2e       	mov	r15, r24
	LCDInit();
	Timer_0_Init(); // initilizing timer = 0
	//int hc=0,mc=0,sc=0;
	while (1) 
    {
		sprintf(line, "  %.2u : %.2u : %.2u", h, m, s);
 188:	8d b7       	in	r24, 0x3d	; 61
 18a:	9e b7       	in	r25, 0x3e	; 62
 18c:	0a 97       	sbiw	r24, 0x0a	; 10
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	9e bf       	out	0x3e, r25	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	8d bf       	out	0x3d, r24	; 61
 198:	ed b7       	in	r30, 0x3d	; 61
 19a:	fe b7       	in	r31, 0x3e	; 62
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	ad b7       	in	r26, 0x3d	; 61
 1a0:	be b7       	in	r27, 0x3e	; 62
 1a2:	12 96       	adiw	r26, 0x02	; 2
 1a4:	dc 93       	st	X, r29
 1a6:	ce 93       	st	-X, r28
 1a8:	11 97       	sbiw	r26, 0x01	; 1
 1aa:	d3 82       	std	Z+3, r13	; 0x03
 1ac:	c2 82       	std	Z+2, r12	; 0x02
 1ae:	80 91 b4 00 	lds	r24, 0x00B4
 1b2:	90 91 b5 00 	lds	r25, 0x00B5
 1b6:	95 83       	std	Z+5, r25	; 0x05
 1b8:	84 83       	std	Z+4, r24	; 0x04
 1ba:	80 91 b6 00 	lds	r24, 0x00B6
 1be:	90 91 b7 00 	lds	r25, 0x00B7
 1c2:	97 83       	std	Z+7, r25	; 0x07
 1c4:	86 83       	std	Z+6, r24	; 0x06
 1c6:	80 91 b8 00 	lds	r24, 0x00B8
 1ca:	90 91 b9 00 	lds	r25, 0x00B9
 1ce:	91 87       	std	Z+9, r25	; 0x09
 1d0:	80 87       	std	Z+8, r24	; 0x08
 1d2:	0e 94 a1 02 	call	0x542	; 0x542 <sprintf>
		LCDGotoXY(1,1);
 1d6:	8d b7       	in	r24, 0x3d	; 61
 1d8:	9e b7       	in	r25, 0x3e	; 62
 1da:	0a 96       	adiw	r24, 0x0a	; 10
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	9e bf       	out	0x3e, r25	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	8d bf       	out	0x3d, r24	; 61
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCDGotoXY>
		LCDString(line);
 1ee:	ce 01       	movw	r24, r28
 1f0:	0e 94 41 02 	call	0x482	; 0x482 <LCDString>
		
		sprintf(line, "                ");
 1f4:	ce 01       	movw	r24, r28
 1f6:	65 e7       	ldi	r22, 0x75	; 117
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	0e 94 9a 02 	call	0x534	; 0x534 <strcpy>
		LCDGotoXY(1,2);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCDGotoXY>
		LCDString(line);
 206:	ce 01       	movw	r24, r28
 208:	0e 94 41 02 	call	0x482	; 0x482 <LCDString>
 20c:	80 91 ba 00 	lds	r24, 0x00BA
 210:	90 91 bb 00 	lds	r25, 0x00BB
		
		if(bit_is_clear(PIND,1))
 214:	81 99       	sbic	0x10, 1	; 16
 216:	5f c0       	rjmp	.+190    	; 0x2d6 <main+0x17a>
 218:	21 2f       	mov	r18, r17
 21a:	2a 95       	dec	r18
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0xbe>
		{
			_delay_us(10); //debounce delay
			sc++;
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 bb 00 	sts	0x00BB, r25
 224:	80 93 ba 00 	sts	0x00BA, r24
 228:	4e c0       	rjmp	.+156    	; 0x2c6 <main+0x16a>
			{
				/*sprintf(line, "You Select SET");
				LCDGotoXY(1,1);
				LCDString(line);*/
				
				sprintf(line, "SET hour: ");
 22a:	8c eb       	ldi	r24, 0xBC	; 188
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	66 e8       	ldi	r22, 0x86	; 134
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	0e 94 9a 02 	call	0x534	; 0x534 <strcpy>
				LCDGotoXY(1,1);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCDGotoXY>
				LCDString(line);
 23e:	8c eb       	ldi	r24, 0xBC	; 188
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 41 02 	call	0x482	; 0x482 <LCDString>
				
				sprintf(line, "%.2u",h);
 246:	00 d0       	rcall	.+0      	; 0x248 <main+0xec>
 248:	00 d0       	rcall	.+0      	; 0x24a <main+0xee>
 24a:	00 d0       	rcall	.+0      	; 0x24c <main+0xf0>
 24c:	ed b7       	in	r30, 0x3d	; 61
 24e:	fe b7       	in	r31, 0x3e	; 62
 250:	31 96       	adiw	r30, 0x01	; 1
 252:	ad b7       	in	r26, 0x3d	; 61
 254:	be b7       	in	r27, 0x3e	; 62
 256:	12 96       	adiw	r26, 0x02	; 2
 258:	dc 93       	st	X, r29
 25a:	ce 93       	st	-X, r28
 25c:	11 97       	sbiw	r26, 0x01	; 1
 25e:	f3 82       	std	Z+3, r15	; 0x03
 260:	e2 82       	std	Z+2, r14	; 0x02
 262:	80 91 b4 00 	lds	r24, 0x00B4
 266:	90 91 b5 00 	lds	r25, 0x00B5
 26a:	95 83       	std	Z+5, r25	; 0x05
 26c:	84 83       	std	Z+4, r24	; 0x04
 26e:	0e 94 a1 02 	call	0x542	; 0x542 <sprintf>
				LCDGotoXY(11,2);
 272:	8d b7       	in	r24, 0x3d	; 61
 274:	9e b7       	in	r25, 0x3e	; 62
 276:	06 96       	adiw	r24, 0x06	; 6
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	9e bf       	out	0x3e, r25	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	8d bf       	out	0x3d, r24	; 61
 282:	8b e0       	ldi	r24, 0x0B	; 11
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCDGotoXY>
				LCDString(line);
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 41 02 	call	0x482	; 0x482 <LCDString>
				
				if(bit_is_clear(PIND,2))
 290:	82 9b       	sbis	0x10, 2	; 16
 292:	04 c0       	rjmp	.+8      	; 0x29c <main+0x140>
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <main+0x158>
 296:	81 2f       	mov	r24, r17
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x13c>
				{
					while(bit_is_clear(PIND,2))
 29c:	82 9b       	sbis	0x10, 2	; 16
 29e:	fb cf       	rjmp	.-10     	; 0x296 <main+0x13a>
					_delay_us(10);
					h++;
 2a0:	80 91 b4 00 	lds	r24, 0x00B4
 2a4:	90 91 b5 00 	lds	r25, 0x00B5
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	90 93 b5 00 	sts	0x00B5, r25
 2ae:	80 93 b4 00 	sts	0x00B4, r24
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <main+0x16a>
				}
				
				else if(bit_is_clear(PIND,1))
 2b4:	81 99       	sbic	0x10, 1	; 16
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <main+0x16a>
 2b8:	81 2f       	mov	r24, r17
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x15e>
				{
					_delay_us(10); //debounce delay
					sc=0;
 2be:	10 92 bb 00 	sts	0x00BB, r1
 2c2:	10 92 ba 00 	sts	0x00BA, r1
		if(bit_is_clear(PIND,1))
		{
			_delay_us(10); //debounce delay
			sc++;
			
			while(sc==1)
 2c6:	80 91 ba 00 	lds	r24, 0x00BA
 2ca:	90 91 bb 00 	lds	r25, 0x00BB
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <main+0x178>
 2d2:	ab cf       	rjmp	.-170    	; 0x22a <main+0xce>
 2d4:	59 cf       	rjmp	.-334    	; 0x188 <main+0x2c>
					sc=0;
				}
			}
		}
		
		else if (sc==2)
 2d6:	02 97       	sbiw	r24, 0x02	; 2
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x180>
 2da:	56 cf       	rjmp	.-340    	; 0x188 <main+0x2c>
		{
				sprintf(line, "You Select SET");
 2dc:	ce 01       	movw	r24, r28
 2de:	66 e9       	ldi	r22, 0x96	; 150
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	0e 94 9a 02 	call	0x534	; 0x534 <strcpy>
				LCDGotoXY(1,1);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCDGotoXY>
				LCDString(line);
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 41 02 	call	0x482	; 0x482 <LCDString>
				
				sprintf(line, "SET minute: ");
 2f4:	ce 01       	movw	r24, r28
 2f6:	65 ea       	ldi	r22, 0xA5	; 165
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0e 94 9a 02 	call	0x534	; 0x534 <strcpy>
				LCDGotoXY(1,2);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	27 c0       	rjmp	.+78     	; 0x350 <main+0x1f4>
 302:	81 2f       	mov	r24, r17
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x1a8>
				LCDString(line);
				
				while(bit_is_clear(PIND,2))
				{
					_delay_us(10);
					m++;
 308:	80 91 b6 00 	lds	r24, 0x00B6
 30c:	90 91 b7 00 	lds	r25, 0x00B7
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 b7 00 	sts	0x00B7, r25
 316:	80 93 b6 00 	sts	0x00B6, r24
					sprintf(line, "%.2u",m);
 31a:	00 d0       	rcall	.+0      	; 0x31c <main+0x1c0>
 31c:	00 d0       	rcall	.+0      	; 0x31e <main+0x1c2>
 31e:	00 d0       	rcall	.+0      	; 0x320 <main+0x1c4>
 320:	ed b7       	in	r30, 0x3d	; 61
 322:	fe b7       	in	r31, 0x3e	; 62
 324:	31 96       	adiw	r30, 0x01	; 1
 326:	ad b7       	in	r26, 0x3d	; 61
 328:	be b7       	in	r27, 0x3e	; 62
 32a:	12 96       	adiw	r26, 0x02	; 2
 32c:	dc 93       	st	X, r29
 32e:	ce 93       	st	-X, r28
 330:	11 97       	sbiw	r26, 0x01	; 1
 332:	f3 82       	std	Z+3, r15	; 0x03
 334:	e2 82       	std	Z+2, r14	; 0x02
 336:	95 83       	std	Z+5, r25	; 0x05
 338:	84 83       	std	Z+4, r24	; 0x04
 33a:	0e 94 a1 02 	call	0x542	; 0x542 <sprintf>
					LCDGotoXY(13,2);
 33e:	8d b7       	in	r24, 0x3d	; 61
 340:	9e b7       	in	r25, 0x3e	; 62
 342:	06 96       	adiw	r24, 0x06	; 6
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	9e bf       	out	0x3e, r25	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	8d bf       	out	0x3d, r24	; 61
 34e:	8d e0       	ldi	r24, 0x0D	; 13
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCDGotoXY>
					LCDString(line);
 356:	ce 01       	movw	r24, r28
 358:	0e 94 41 02 	call	0x482	; 0x482 <LCDString>
				
				sprintf(line, "SET minute: ");
				LCDGotoXY(1,2);
				LCDString(line);
				
				while(bit_is_clear(PIND,2))
 35c:	82 9b       	sbis	0x10, 2	; 16
 35e:	d1 cf       	rjmp	.-94     	; 0x302 <main+0x1a6>
 360:	13 cf       	rjmp	.-474    	; 0x188 <main+0x2c>

00000362 <LCDSendCmd4BIT>:


void LCDSendCmd4BIT(unsigned char ucCmd)
{
	
	if(ucCmd&0x01) LCD_DATA_PORT |= (1<<LCD_D4);
 362:	80 ff       	sbrs	r24, 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <LCDSendCmd4BIT+0x8>
 366:	ac 9a       	sbi	0x15, 4	; 21
 368:	01 c0       	rjmp	.+2      	; 0x36c <LCDSendCmd4BIT+0xa>
	else LCD_DATA_PORT &= ~(1<<LCD_D4);
 36a:	ac 98       	cbi	0x15, 4	; 21

	if(ucCmd&0x02) LCD_DATA_PORT |= (1<<LCD_D5);
 36c:	81 ff       	sbrs	r24, 1
 36e:	02 c0       	rjmp	.+4      	; 0x374 <LCDSendCmd4BIT+0x12>
 370:	ad 9a       	sbi	0x15, 5	; 21
 372:	01 c0       	rjmp	.+2      	; 0x376 <LCDSendCmd4BIT+0x14>
	else LCD_DATA_PORT &= ~(1<<LCD_D5);
 374:	ad 98       	cbi	0x15, 5	; 21

	if(ucCmd&0x04) LCD_DATA_PORT |= (1<<LCD_D6);
 376:	82 ff       	sbrs	r24, 2
 378:	02 c0       	rjmp	.+4      	; 0x37e <LCDSendCmd4BIT+0x1c>
 37a:	ae 9a       	sbi	0x15, 6	; 21
 37c:	01 c0       	rjmp	.+2      	; 0x380 <LCDSendCmd4BIT+0x1e>
	else LCD_DATA_PORT &= ~(1<<LCD_D6);
 37e:	ae 98       	cbi	0x15, 6	; 21

	if(ucCmd&0x08) LCD_DATA_PORT |= (1<<LCD_D7);
 380:	83 ff       	sbrs	r24, 3
 382:	02 c0       	rjmp	.+4      	; 0x388 <LCDSendCmd4BIT+0x26>
 384:	af 9a       	sbi	0x15, 7	; 21
 386:	01 c0       	rjmp	.+2      	; 0x38a <LCDSendCmd4BIT+0x28>
	else LCD_DATA_PORT &= ~(1<<LCD_D7);
 388:	af 98       	cbi	0x15, 7	; 21

	LCD_CONTROL_PORT |= (1<<LCD_E);
 38a:	96 9a       	sbi	0x12, 6	; 18
	LCD_CONTROL_PORT &= ~(1<<LCD_E);
 38c:	96 98       	cbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 38e:	80 ea       	ldi	r24, 0xA0	; 160
 390:	9f e0       	ldi	r25, 0x0F	; 15
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCDSendCmd4BIT+0x30>

	_delay_ms(2);
}
 396:	08 95       	ret

00000398 <LCDSendData>:
	LCDSendCmd4BIT(ucCmd);
}


void LCDSendData (unsigned char ucData)
{
 398:	1f 93       	push	r17
 39a:	18 2f       	mov	r17, r24
	//LCD_RS=LCD_data;
	LCD_CONTROL_PORT |= (1<<LCD_RS);
 39c:	94 9a       	sbi	0x12, 4	; 18

	LCDSendCmd4BIT(ucData>>4);
 39e:	82 95       	swap	r24
 3a0:	8f 70       	andi	r24, 0x0F	; 15
 3a2:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
	LCDSendCmd4BIT(ucData);
 3a6:	81 2f       	mov	r24, r17
 3a8:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
}
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <LCDSendCmd>:
		LCDSendCmd(DDRAM_PTR + LINE4_ADDR + x-1);
	}
}

void LCDSendCmd(unsigned char ucCmd)
{
 3b0:	1f 93       	push	r17
 3b2:	18 2f       	mov	r17, r24
	//LCD_RS=LCD_cmd;
	LCD_CONTROL_PORT &= ~(1<<LCD_RS);
 3b4:	94 98       	cbi	0x12, 4	; 18

	LCDSendCmd4BIT(ucCmd>>4);
 3b6:	82 95       	swap	r24
 3b8:	8f 70       	andi	r24, 0x0F	; 15
 3ba:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
	LCDSendCmd4BIT(ucCmd);
 3be:	81 2f       	mov	r24, r17
 3c0:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
}
 3c4:	1f 91       	pop	r17
 3c6:	08 95       	ret

000003c8 <LCDGotoXY>:
}


void LCDGotoXY(unsigned char x,unsigned char y)
{
	if(y == 1)
 3c8:	61 30       	cpi	r22, 0x01	; 1
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <LCDGotoXY+0x8>
	{
		LCDSendCmd(DDRAM_PTR + LINE1_ADDR + x-1);
 3cc:	81 58       	subi	r24, 0x81	; 129
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <LCDGotoXY+0x16>
	}
	else if(y == 2)
 3d0:	62 30       	cpi	r22, 0x02	; 2
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <LCDGotoXY+0x10>
	{
		LCDSendCmd(DDRAM_PTR + LINE2_ADDR + x-1);
 3d4:	81 54       	subi	r24, 0x41	; 65
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <LCDGotoXY+0x16>
	}
	else if(y == 3)
 3d8:	63 30       	cpi	r22, 0x03	; 3
 3da:	21 f4       	brne	.+8      	; 0x3e4 <LCDGotoXY+0x1c>
	{
		LCDSendCmd(DDRAM_PTR + LINE3_ADDR + x-1);
 3dc:	8d 56       	subi	r24, 0x6D	; 109
 3de:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
 3e2:	08 95       	ret
	}
	else if(y == 4)
 3e4:	64 30       	cpi	r22, 0x04	; 4
 3e6:	19 f4       	brne	.+6      	; 0x3ee <LCDGotoXY+0x26>
	{
		LCDSendCmd(DDRAM_PTR + LINE4_ADDR + x-1);
 3e8:	8d 52       	subi	r24, 0x2D	; 45
 3ea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
 3ee:	08 95       	ret

000003f0 <LCDInit>:
#include "lcd.h"

void LCDInit()
{

	LCD_CONTROL_DIRECTION |= (1<<LCD_RS); //Set DDRC_Of_RS as OUTPUT Pin. 
 3f0:	8c 9a       	sbi	0x11, 4	; 17
	LCD_CONTROL_DIRECTION |= (1<<LCD_RW); //Set DDRC_Of_RW as OUTPUT Pin. 
 3f2:	8d 9a       	sbi	0x11, 5	; 17
	LCD_CONTROL_DIRECTION |= (1<<LCD_E); //Set DDRC_Of_E as OUTPUT Pin. 
 3f4:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_DIRECTION |= (1<<LCD_D4); //Set DDRC_Of_D4 as OUTPUT Pin. 
 3f6:	a4 9a       	sbi	0x14, 4	; 20
	LCD_DATA_DIRECTION |= (1<<LCD_D5); //Set DDRC_Of_D5 as OUTPUT Pin. 
 3f8:	a5 9a       	sbi	0x14, 5	; 20
	LCD_DATA_DIRECTION |= (1<<LCD_D6); //Set DDRC_Of_D6 as OUTPUT Pin. 
 3fa:	a6 9a       	sbi	0x14, 6	; 20
	LCD_DATA_DIRECTION |= (1<<LCD_D7); //Set DDRC_Of_D7 as OUTPUT Pin. 
 3fc:	a7 9a       	sbi	0x14, 7	; 20


	LCD_CONTROL_PORT &= ~(1<<LCD_RS); //PORT_Of_RS goes to LOW for Command Mode 
 3fe:	94 98       	cbi	0x12, 4	; 18
	LCD_CONTROL_PORT &= ~(1<<LCD_E); //Clear of PORT_Of_E (Initialize stage is zero)  
 400:	96 98       	cbi	0x12, 6	; 18
 402:	8c ed       	ldi	r24, 0xDC	; 220
 404:	95 e0       	ldi	r25, 0x05	; 5
 406:	28 ec       	ldi	r18, 0xC8	; 200
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	f9 01       	movw	r30, r18
 40c:	31 97       	sbiw	r30, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <LCDInit+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 410:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 412:	d9 f7       	brne	.-10     	; 0x40a <LCDInit+0x1a>
	_delay_ms(150);

	LCDSendCmd4BIT(0x03); // 8-bit data length (Repeat 3-times for clear lcd memory) 
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
 41a:	8c ed       	ldi	r24, 0xDC	; 220
 41c:	95 e0       	ldi	r25, 0x05	; 5
 41e:	28 ec       	ldi	r18, 0xC8	; 200
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	f9 01       	movw	r30, r18
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <LCDInit+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 428:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42a:	d9 f7       	brne	.-10     	; 0x422 <LCDInit+0x32>
	_delay_ms(150);
	LCDSendCmd4BIT(0x03); // 8-bit data length (Repeat 3-times for clear lcd memory) 
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
 432:	8c ed       	ldi	r24, 0xDC	; 220
 434:	95 e0       	ldi	r25, 0x05	; 5
 436:	28 ec       	ldi	r18, 0xC8	; 200
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	f9 01       	movw	r30, r18
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <LCDInit+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 440:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 442:	d9 f7       	brne	.-10     	; 0x43a <LCDInit+0x4a>
	_delay_ms(150);
	LCDSendCmd4BIT(0x03); // 8-bit data length (Repeat 3-times for clear lcd memory) 
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
 44a:	8c ed       	ldi	r24, 0xDC	; 220
 44c:	95 e0       	ldi	r25, 0x05	; 5
 44e:	28 ec       	ldi	r18, 0xC8	; 200
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <LCDInit+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 458:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45a:	d9 f7       	brne	.-10     	; 0x452 <LCDInit+0x62>
	_delay_ms(150);

	LCDSendCmd4BIT(0x02); 	//Set to 4 bit operation 
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
	LCDSendCmd(0x28);		//function set, 4 line, 8-bit, character size=5x7 
 462:	88 e2       	ldi	r24, 0x28	; 40
 464:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
	//LCDClear();				//clear display (0x01) 
	//LCDOff();				//turn off the LCD (0x08) 
	LCDOn();				//turn on the LCD (0x0C) 
 468:	8c e0       	ldi	r24, 0x0C	; 12
 46a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
	LCDSendCmd(0x06); 		//Sets mode to increment the address by one and to shift the cursor to the right at the time of write to the DD/CGRAM. 
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
	LCDSendCmd(DDRAM_PTR); 	//set DDRAM Address (0x80) 
 474:	80 e8       	ldi	r24, 0x80	; 128
 476:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
}
 47a:	08 95       	ret

0000047c <LCDPutchar>:



void LCDPutchar(char c)
{
	LCDSendData(c);
 47c:	0e 94 cc 01 	call	0x398	; 0x398 <LCDSendData>
}
 480:	08 95       	ret

00000482 <LCDString>:


void LCDString(char *msg)
{
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	08 2f       	mov	r16, r24
 48c:	28 2f       	mov	r18, r24
 48e:	39 2f       	mov	r19, r25
 490:	e9 01       	movw	r28, r18
 492:	03 c0       	rjmp	.+6      	; 0x49a <LCDString+0x18>



void LCDPutchar(char c)
{
	LCDSendData(c);
 494:	0e 94 cc 01 	call	0x398	; 0x398 <LCDSendData>
	uint8_t len = 0;

	while(*msg)
	{
		LCDPutchar(*msg);
		msg++; 
 498:	21 96       	adiw	r28, 0x01	; 1
 49a:	ce 01       	movw	r24, r28
 49c:	80 1b       	sub	r24, r16
 49e:	18 2f       	mov	r17, r24

void LCDString(char *msg)
{
	uint8_t len = 0;

	while(*msg)
 4a0:	88 81       	ld	r24, Y
 4a2:	88 23       	and	r24, r24
 4a4:	b9 f7       	brne	.-18     	; 0x494 <LCDString+0x12>
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <LCDString+0x2e>



void LCDPutchar(char c)
{
	LCDSendData(c);
 4a8:	80 e2       	ldi	r24, 0x20	; 32
 4aa:	0e 94 cc 01 	call	0x398	; 0x398 <LCDSendData>
	}

	while(LCD_MAX_CHAR_IN_LINE - len)
	{
		LCDPutchar(0x20); // Space
		len++;
 4ae:	1f 5f       	subi	r17, 0xFF	; 255
		LCDPutchar(*msg);
		msg++; 
		len++;
	}

	while(LCD_MAX_CHAR_IN_LINE - len)
 4b0:	14 31       	cpi	r17, 0x14	; 20
 4b2:	d1 f7       	brne	.-12     	; 0x4a8 <LCDString+0x26>
	{
		LCDPutchar(0x20); // Space
		len++;
	}

}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	08 95       	ret

000004be <LCDShowCursor>:


void LCDShowCursor()
{
	LCDSendCmd(0x0E); // Display on, Cursor On and Blink On;
 4be:	8e e0       	ldi	r24, 0x0E	; 14
 4c0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
}
 4c4:	08 95       	ret

000004c6 <LCDHideCursor>:


void LCDHideCursor()
{
	LCDSendCmd(0x0C); // Display on, Cursor Off and Blink Off;
 4c6:	8c e0       	ldi	r24, 0x0C	; 12
 4c8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
}
 4cc:	08 95       	ret

000004ce <LCDRefresh>:


void LCDRefresh()
{
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17

	//LCD_RS= LCD_cmd;
	LCD_CONTROL_PORT &= ~(1<<LCD_RS);
 4d2:	94 98       	cbi	0x12, 4	; 18
	//LCD_E = LCD_DISABLE;
	LCD_CONTROL_PORT &= ~(1<<LCD_E);
 4d4:	96 98       	cbi	0x12, 6	; 18
 4d6:	00 ea       	ldi	r16, 0xA0	; 160
 4d8:	1f e0       	ldi	r17, 0x0F	; 15
 4da:	c8 01       	movw	r24, r16
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <LCDRefresh+0xe>

	_delay_ms(2);

	LCDSendCmd4BIT(0x03);
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
 4e6:	c8 01       	movw	r24, r16
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCDRefresh+0x1a>
	_delay_ms(2);

	LCDSendCmd4BIT(0x03);
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
 4f2:	c8 01       	movw	r24, r16
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCDRefresh+0x26>
	_delay_ms(2);

	LCDSendCmd4BIT(0x03);
 4f8:	83 e0       	ldi	r24, 0x03	; 3
 4fa:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
 4fe:	c8 01       	movw	r24, r16
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <LCDRefresh+0x32>
	_delay_ms(2);

	LCDSendCmd4BIT(0x02);
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	0e 94 b1 01 	call	0x362	; 0x362 <LCDSendCmd4BIT>
 50a:	c8 01       	movw	r24, r16
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <LCDRefresh+0x3e>
	_delay_ms(2);

	LCDSendCmd(0x28);		//function set, 4 line, 8-bit, character size=5x7
 510:	88 e2       	ldi	r24, 0x28	; 40
 512:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
	LCDSendCmd(0x02 );
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
	LCDOn();				//turn on the LCD
 51c:	8c e0       	ldi	r24, 0x0C	; 12
 51e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
	LCDSendCmd(0x06);
 522:	86 e0       	ldi	r24, 0x06	; 6
 524:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
	LCDSendCmd(DDRAM_PTR); 	//set DDRAM Address
 528:	80 e8       	ldi	r24, 0x80	; 128
 52a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDSendCmd>
}
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	08 95       	ret

00000534 <strcpy>:
 534:	fb 01       	movw	r30, r22
 536:	dc 01       	movw	r26, r24
 538:	01 90       	ld	r0, Z+
 53a:	0d 92       	st	X+, r0
 53c:	00 20       	and	r0, r0
 53e:	e1 f7       	brne	.-8      	; 0x538 <strcpy+0x4>
 540:	08 95       	ret

00000542 <sprintf>:
 542:	ae e0       	ldi	r26, 0x0E	; 14
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	e7 ea       	ldi	r30, 0xA7	; 167
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__prologue_saves__+0x1c>
 54e:	0d 89       	ldd	r16, Y+21	; 0x15
 550:	1e 89       	ldd	r17, Y+22	; 0x16
 552:	86 e0       	ldi	r24, 0x06	; 6
 554:	8c 83       	std	Y+4, r24	; 0x04
 556:	1a 83       	std	Y+2, r17	; 0x02
 558:	09 83       	std	Y+1, r16	; 0x01
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	9f e7       	ldi	r25, 0x7F	; 127
 55e:	9e 83       	std	Y+6, r25	; 0x06
 560:	8d 83       	std	Y+5, r24	; 0x05
 562:	9e 01       	movw	r18, r28
 564:	27 5e       	subi	r18, 0xE7	; 231
 566:	3f 4f       	sbci	r19, 0xFF	; 255
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	6f 89       	ldd	r22, Y+23	; 0x17
 56e:	78 8d       	ldd	r23, Y+24	; 0x18
 570:	a9 01       	movw	r20, r18
 572:	0e 94 c5 02 	call	0x58a	; 0x58a <vfprintf>
 576:	2f 81       	ldd	r18, Y+7	; 0x07
 578:	38 85       	ldd	r19, Y+8	; 0x08
 57a:	02 0f       	add	r16, r18
 57c:	13 1f       	adc	r17, r19
 57e:	f8 01       	movw	r30, r16
 580:	10 82       	st	Z, r1
 582:	2e 96       	adiw	r28, 0x0e	; 14
 584:	e4 e0       	ldi	r30, 0x04	; 4
 586:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__epilogue_restores__+0x1c>

0000058a <vfprintf>:
 58a:	ab e0       	ldi	r26, 0x0B	; 11
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	eb ec       	ldi	r30, 0xCB	; 203
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__prologue_saves__>
 596:	3c 01       	movw	r6, r24
 598:	2b 01       	movw	r4, r22
 59a:	5a 01       	movw	r10, r20
 59c:	fc 01       	movw	r30, r24
 59e:	17 82       	std	Z+7, r1	; 0x07
 5a0:	16 82       	std	Z+6, r1	; 0x06
 5a2:	83 81       	ldd	r24, Z+3	; 0x03
 5a4:	81 fd       	sbrc	r24, 1
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <vfprintf+0x24>
 5a8:	6f ef       	ldi	r22, 0xFF	; 255
 5aa:	7f ef       	ldi	r23, 0xFF	; 255
 5ac:	c6 c1       	rjmp	.+908    	; 0x93a <__stack+0xdb>
 5ae:	9a e0       	ldi	r25, 0x0A	; 10
 5b0:	89 2e       	mov	r8, r25
 5b2:	1e 01       	movw	r2, r28
 5b4:	08 94       	sec
 5b6:	21 1c       	adc	r2, r1
 5b8:	31 1c       	adc	r3, r1
 5ba:	f3 01       	movw	r30, r6
 5bc:	23 81       	ldd	r18, Z+3	; 0x03
 5be:	f2 01       	movw	r30, r4
 5c0:	23 fd       	sbrc	r18, 3
 5c2:	85 91       	lpm	r24, Z+
 5c4:	23 ff       	sbrs	r18, 3
 5c6:	81 91       	ld	r24, Z+
 5c8:	2f 01       	movw	r4, r30
 5ca:	88 23       	and	r24, r24
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <vfprintf+0x46>
 5ce:	b2 c1       	rjmp	.+868    	; 0x934 <__stack+0xd5>
 5d0:	85 32       	cpi	r24, 0x25	; 37
 5d2:	39 f4       	brne	.+14     	; 0x5e2 <vfprintf+0x58>
 5d4:	23 fd       	sbrc	r18, 3
 5d6:	85 91       	lpm	r24, Z+
 5d8:	23 ff       	sbrs	r18, 3
 5da:	81 91       	ld	r24, Z+
 5dc:	2f 01       	movw	r4, r30
 5de:	85 32       	cpi	r24, 0x25	; 37
 5e0:	29 f4       	brne	.+10     	; 0x5ec <vfprintf+0x62>
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	b3 01       	movw	r22, r6
 5e6:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <vfprintf+0x30>
 5ec:	98 2f       	mov	r25, r24
 5ee:	ff 24       	eor	r15, r15
 5f0:	ee 24       	eor	r14, r14
 5f2:	99 24       	eor	r9, r9
 5f4:	ff e1       	ldi	r31, 0x1F	; 31
 5f6:	ff 15       	cp	r31, r15
 5f8:	d0 f0       	brcs	.+52     	; 0x62e <vfprintf+0xa4>
 5fa:	9b 32       	cpi	r25, 0x2B	; 43
 5fc:	69 f0       	breq	.+26     	; 0x618 <vfprintf+0x8e>
 5fe:	9c 32       	cpi	r25, 0x2C	; 44
 600:	28 f4       	brcc	.+10     	; 0x60c <vfprintf+0x82>
 602:	90 32       	cpi	r25, 0x20	; 32
 604:	59 f0       	breq	.+22     	; 0x61c <vfprintf+0x92>
 606:	93 32       	cpi	r25, 0x23	; 35
 608:	91 f4       	brne	.+36     	; 0x62e <vfprintf+0xa4>
 60a:	0e c0       	rjmp	.+28     	; 0x628 <vfprintf+0x9e>
 60c:	9d 32       	cpi	r25, 0x2D	; 45
 60e:	49 f0       	breq	.+18     	; 0x622 <vfprintf+0x98>
 610:	90 33       	cpi	r25, 0x30	; 48
 612:	69 f4       	brne	.+26     	; 0x62e <vfprintf+0xa4>
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	24 c0       	rjmp	.+72     	; 0x660 <vfprintf+0xd6>
 618:	52 e0       	ldi	r21, 0x02	; 2
 61a:	f5 2a       	or	r15, r21
 61c:	84 e0       	ldi	r24, 0x04	; 4
 61e:	f8 2a       	or	r15, r24
 620:	28 c0       	rjmp	.+80     	; 0x672 <vfprintf+0xe8>
 622:	98 e0       	ldi	r25, 0x08	; 8
 624:	f9 2a       	or	r15, r25
 626:	25 c0       	rjmp	.+74     	; 0x672 <vfprintf+0xe8>
 628:	e0 e1       	ldi	r30, 0x10	; 16
 62a:	fe 2a       	or	r15, r30
 62c:	22 c0       	rjmp	.+68     	; 0x672 <vfprintf+0xe8>
 62e:	f7 fc       	sbrc	r15, 7
 630:	29 c0       	rjmp	.+82     	; 0x684 <vfprintf+0xfa>
 632:	89 2f       	mov	r24, r25
 634:	80 53       	subi	r24, 0x30	; 48
 636:	8a 30       	cpi	r24, 0x0A	; 10
 638:	70 f4       	brcc	.+28     	; 0x656 <vfprintf+0xcc>
 63a:	f6 fe       	sbrs	r15, 6
 63c:	05 c0       	rjmp	.+10     	; 0x648 <vfprintf+0xbe>
 63e:	98 9c       	mul	r9, r8
 640:	90 2c       	mov	r9, r0
 642:	11 24       	eor	r1, r1
 644:	98 0e       	add	r9, r24
 646:	15 c0       	rjmp	.+42     	; 0x672 <vfprintf+0xe8>
 648:	e8 9c       	mul	r14, r8
 64a:	e0 2c       	mov	r14, r0
 64c:	11 24       	eor	r1, r1
 64e:	e8 0e       	add	r14, r24
 650:	f0 e2       	ldi	r31, 0x20	; 32
 652:	ff 2a       	or	r15, r31
 654:	0e c0       	rjmp	.+28     	; 0x672 <vfprintf+0xe8>
 656:	9e 32       	cpi	r25, 0x2E	; 46
 658:	29 f4       	brne	.+10     	; 0x664 <vfprintf+0xda>
 65a:	f6 fc       	sbrc	r15, 6
 65c:	6b c1       	rjmp	.+726    	; 0x934 <__stack+0xd5>
 65e:	40 e4       	ldi	r20, 0x40	; 64
 660:	f4 2a       	or	r15, r20
 662:	07 c0       	rjmp	.+14     	; 0x672 <vfprintf+0xe8>
 664:	9c 36       	cpi	r25, 0x6C	; 108
 666:	19 f4       	brne	.+6      	; 0x66e <vfprintf+0xe4>
 668:	50 e8       	ldi	r21, 0x80	; 128
 66a:	f5 2a       	or	r15, r21
 66c:	02 c0       	rjmp	.+4      	; 0x672 <vfprintf+0xe8>
 66e:	98 36       	cpi	r25, 0x68	; 104
 670:	49 f4       	brne	.+18     	; 0x684 <vfprintf+0xfa>
 672:	f2 01       	movw	r30, r4
 674:	23 fd       	sbrc	r18, 3
 676:	95 91       	lpm	r25, Z+
 678:	23 ff       	sbrs	r18, 3
 67a:	91 91       	ld	r25, Z+
 67c:	2f 01       	movw	r4, r30
 67e:	99 23       	and	r25, r25
 680:	09 f0       	breq	.+2      	; 0x684 <vfprintf+0xfa>
 682:	b8 cf       	rjmp	.-144    	; 0x5f4 <vfprintf+0x6a>
 684:	89 2f       	mov	r24, r25
 686:	85 54       	subi	r24, 0x45	; 69
 688:	83 30       	cpi	r24, 0x03	; 3
 68a:	18 f0       	brcs	.+6      	; 0x692 <vfprintf+0x108>
 68c:	80 52       	subi	r24, 0x20	; 32
 68e:	83 30       	cpi	r24, 0x03	; 3
 690:	38 f4       	brcc	.+14     	; 0x6a0 <vfprintf+0x116>
 692:	44 e0       	ldi	r20, 0x04	; 4
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	a4 0e       	add	r10, r20
 698:	b5 1e       	adc	r11, r21
 69a:	5f e3       	ldi	r21, 0x3F	; 63
 69c:	59 83       	std	Y+1, r21	; 0x01
 69e:	0f c0       	rjmp	.+30     	; 0x6be <vfprintf+0x134>
 6a0:	93 36       	cpi	r25, 0x63	; 99
 6a2:	31 f0       	breq	.+12     	; 0x6b0 <vfprintf+0x126>
 6a4:	93 37       	cpi	r25, 0x73	; 115
 6a6:	79 f0       	breq	.+30     	; 0x6c6 <vfprintf+0x13c>
 6a8:	93 35       	cpi	r25, 0x53	; 83
 6aa:	09 f0       	breq	.+2      	; 0x6ae <vfprintf+0x124>
 6ac:	56 c0       	rjmp	.+172    	; 0x75a <vfprintf+0x1d0>
 6ae:	20 c0       	rjmp	.+64     	; 0x6f0 <vfprintf+0x166>
 6b0:	f5 01       	movw	r30, r10
 6b2:	80 81       	ld	r24, Z
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	42 e0       	ldi	r20, 0x02	; 2
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	a4 0e       	add	r10, r20
 6bc:	b5 1e       	adc	r11, r21
 6be:	61 01       	movw	r12, r2
 6c0:	01 e0       	ldi	r16, 0x01	; 1
 6c2:	10 e0       	ldi	r17, 0x00	; 0
 6c4:	12 c0       	rjmp	.+36     	; 0x6ea <vfprintf+0x160>
 6c6:	f5 01       	movw	r30, r10
 6c8:	c0 80       	ld	r12, Z
 6ca:	d1 80       	ldd	r13, Z+1	; 0x01
 6cc:	f6 fc       	sbrc	r15, 6
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <vfprintf+0x14c>
 6d0:	6f ef       	ldi	r22, 0xFF	; 255
 6d2:	7f ef       	ldi	r23, 0xFF	; 255
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <vfprintf+0x150>
 6d6:	69 2d       	mov	r22, r9
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	42 e0       	ldi	r20, 0x02	; 2
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	a4 0e       	add	r10, r20
 6e0:	b5 1e       	adc	r11, r21
 6e2:	c6 01       	movw	r24, r12
 6e4:	0e 94 ad 04 	call	0x95a	; 0x95a <strnlen>
 6e8:	8c 01       	movw	r16, r24
 6ea:	5f e7       	ldi	r21, 0x7F	; 127
 6ec:	f5 22       	and	r15, r21
 6ee:	14 c0       	rjmp	.+40     	; 0x718 <vfprintf+0x18e>
 6f0:	f5 01       	movw	r30, r10
 6f2:	c0 80       	ld	r12, Z
 6f4:	d1 80       	ldd	r13, Z+1	; 0x01
 6f6:	f6 fc       	sbrc	r15, 6
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <vfprintf+0x176>
 6fa:	6f ef       	ldi	r22, 0xFF	; 255
 6fc:	7f ef       	ldi	r23, 0xFF	; 255
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <vfprintf+0x17a>
 700:	69 2d       	mov	r22, r9
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	42 e0       	ldi	r20, 0x02	; 2
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	a4 0e       	add	r10, r20
 70a:	b5 1e       	adc	r11, r21
 70c:	c6 01       	movw	r24, r12
 70e:	0e 94 a2 04 	call	0x944	; 0x944 <strnlen_P>
 712:	8c 01       	movw	r16, r24
 714:	50 e8       	ldi	r21, 0x80	; 128
 716:	f5 2a       	or	r15, r21
 718:	f3 fe       	sbrs	r15, 3
 71a:	07 c0       	rjmp	.+14     	; 0x72a <vfprintf+0x1a0>
 71c:	1a c0       	rjmp	.+52     	; 0x752 <vfprintf+0x1c8>
 71e:	80 e2       	ldi	r24, 0x20	; 32
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	b3 01       	movw	r22, r6
 724:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 728:	ea 94       	dec	r14
 72a:	8e 2d       	mov	r24, r14
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	08 17       	cp	r16, r24
 730:	19 07       	cpc	r17, r25
 732:	a8 f3       	brcs	.-22     	; 0x71e <vfprintf+0x194>
 734:	0e c0       	rjmp	.+28     	; 0x752 <vfprintf+0x1c8>
 736:	f6 01       	movw	r30, r12
 738:	f7 fc       	sbrc	r15, 7
 73a:	85 91       	lpm	r24, Z+
 73c:	f7 fe       	sbrs	r15, 7
 73e:	81 91       	ld	r24, Z+
 740:	6f 01       	movw	r12, r30
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	b3 01       	movw	r22, r6
 746:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 74a:	e1 10       	cpse	r14, r1
 74c:	ea 94       	dec	r14
 74e:	01 50       	subi	r16, 0x01	; 1
 750:	10 40       	sbci	r17, 0x00	; 0
 752:	01 15       	cp	r16, r1
 754:	11 05       	cpc	r17, r1
 756:	79 f7       	brne	.-34     	; 0x736 <vfprintf+0x1ac>
 758:	ea c0       	rjmp	.+468    	; 0x92e <__stack+0xcf>
 75a:	94 36       	cpi	r25, 0x64	; 100
 75c:	11 f0       	breq	.+4      	; 0x762 <vfprintf+0x1d8>
 75e:	99 36       	cpi	r25, 0x69	; 105
 760:	69 f5       	brne	.+90     	; 0x7bc <vfprintf+0x232>
 762:	f7 fe       	sbrs	r15, 7
 764:	08 c0       	rjmp	.+16     	; 0x776 <vfprintf+0x1ec>
 766:	f5 01       	movw	r30, r10
 768:	20 81       	ld	r18, Z
 76a:	31 81       	ldd	r19, Z+1	; 0x01
 76c:	42 81       	ldd	r20, Z+2	; 0x02
 76e:	53 81       	ldd	r21, Z+3	; 0x03
 770:	84 e0       	ldi	r24, 0x04	; 4
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0a c0       	rjmp	.+20     	; 0x78a <vfprintf+0x200>
 776:	f5 01       	movw	r30, r10
 778:	80 81       	ld	r24, Z
 77a:	91 81       	ldd	r25, Z+1	; 0x01
 77c:	9c 01       	movw	r18, r24
 77e:	44 27       	eor	r20, r20
 780:	37 fd       	sbrc	r19, 7
 782:	40 95       	com	r20
 784:	54 2f       	mov	r21, r20
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	a8 0e       	add	r10, r24
 78c:	b9 1e       	adc	r11, r25
 78e:	9f e6       	ldi	r25, 0x6F	; 111
 790:	f9 22       	and	r15, r25
 792:	57 ff       	sbrs	r21, 7
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <vfprintf+0x21e>
 796:	50 95       	com	r21
 798:	40 95       	com	r20
 79a:	30 95       	com	r19
 79c:	21 95       	neg	r18
 79e:	3f 4f       	sbci	r19, 0xFF	; 255
 7a0:	4f 4f       	sbci	r20, 0xFF	; 255
 7a2:	5f 4f       	sbci	r21, 0xFF	; 255
 7a4:	e0 e8       	ldi	r30, 0x80	; 128
 7a6:	fe 2a       	or	r15, r30
 7a8:	ca 01       	movw	r24, r20
 7aa:	b9 01       	movw	r22, r18
 7ac:	a1 01       	movw	r20, r2
 7ae:	2a e0       	ldi	r18, 0x0A	; 10
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__ultoa_invert>
 7b6:	d8 2e       	mov	r13, r24
 7b8:	d2 18       	sub	r13, r2
 7ba:	40 c0       	rjmp	.+128    	; 0x83c <vfprintf+0x2b2>
 7bc:	95 37       	cpi	r25, 0x75	; 117
 7be:	29 f4       	brne	.+10     	; 0x7ca <vfprintf+0x240>
 7c0:	1f 2d       	mov	r17, r15
 7c2:	1f 7e       	andi	r17, 0xEF	; 239
 7c4:	2a e0       	ldi	r18, 0x0A	; 10
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	1d c0       	rjmp	.+58     	; 0x804 <vfprintf+0x27a>
 7ca:	1f 2d       	mov	r17, r15
 7cc:	19 7f       	andi	r17, 0xF9	; 249
 7ce:	9f 36       	cpi	r25, 0x6F	; 111
 7d0:	61 f0       	breq	.+24     	; 0x7ea <vfprintf+0x260>
 7d2:	90 37       	cpi	r25, 0x70	; 112
 7d4:	20 f4       	brcc	.+8      	; 0x7de <vfprintf+0x254>
 7d6:	98 35       	cpi	r25, 0x58	; 88
 7d8:	09 f0       	breq	.+2      	; 0x7dc <vfprintf+0x252>
 7da:	ac c0       	rjmp	.+344    	; 0x934 <__stack+0xd5>
 7dc:	0f c0       	rjmp	.+30     	; 0x7fc <vfprintf+0x272>
 7de:	90 37       	cpi	r25, 0x70	; 112
 7e0:	39 f0       	breq	.+14     	; 0x7f0 <vfprintf+0x266>
 7e2:	98 37       	cpi	r25, 0x78	; 120
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <vfprintf+0x25e>
 7e6:	a6 c0       	rjmp	.+332    	; 0x934 <__stack+0xd5>
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <vfprintf+0x268>
 7ea:	28 e0       	ldi	r18, 0x08	; 8
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	0a c0       	rjmp	.+20     	; 0x804 <vfprintf+0x27a>
 7f0:	10 61       	ori	r17, 0x10	; 16
 7f2:	14 fd       	sbrc	r17, 4
 7f4:	14 60       	ori	r17, 0x04	; 4
 7f6:	20 e1       	ldi	r18, 0x10	; 16
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <vfprintf+0x27a>
 7fc:	14 fd       	sbrc	r17, 4
 7fe:	16 60       	ori	r17, 0x06	; 6
 800:	20 e1       	ldi	r18, 0x10	; 16
 802:	32 e0       	ldi	r19, 0x02	; 2
 804:	17 ff       	sbrs	r17, 7
 806:	08 c0       	rjmp	.+16     	; 0x818 <vfprintf+0x28e>
 808:	f5 01       	movw	r30, r10
 80a:	60 81       	ld	r22, Z
 80c:	71 81       	ldd	r23, Z+1	; 0x01
 80e:	82 81       	ldd	r24, Z+2	; 0x02
 810:	93 81       	ldd	r25, Z+3	; 0x03
 812:	44 e0       	ldi	r20, 0x04	; 4
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	08 c0       	rjmp	.+16     	; 0x828 <vfprintf+0x29e>
 818:	f5 01       	movw	r30, r10
 81a:	80 81       	ld	r24, Z
 81c:	91 81       	ldd	r25, Z+1	; 0x01
 81e:	bc 01       	movw	r22, r24
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	42 e0       	ldi	r20, 0x02	; 2
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	a4 0e       	add	r10, r20
 82a:	b5 1e       	adc	r11, r21
 82c:	a1 01       	movw	r20, r2
 82e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__ultoa_invert>
 832:	d8 2e       	mov	r13, r24
 834:	d2 18       	sub	r13, r2
 836:	8f e7       	ldi	r24, 0x7F	; 127
 838:	f8 2e       	mov	r15, r24
 83a:	f1 22       	and	r15, r17
 83c:	f6 fe       	sbrs	r15, 6
 83e:	0b c0       	rjmp	.+22     	; 0x856 <vfprintf+0x2cc>
 840:	5e ef       	ldi	r21, 0xFE	; 254
 842:	f5 22       	and	r15, r21
 844:	d9 14       	cp	r13, r9
 846:	38 f4       	brcc	.+14     	; 0x856 <vfprintf+0x2cc>
 848:	f4 fe       	sbrs	r15, 4
 84a:	07 c0       	rjmp	.+14     	; 0x85a <vfprintf+0x2d0>
 84c:	f2 fc       	sbrc	r15, 2
 84e:	05 c0       	rjmp	.+10     	; 0x85a <vfprintf+0x2d0>
 850:	8f ee       	ldi	r24, 0xEF	; 239
 852:	f8 22       	and	r15, r24
 854:	02 c0       	rjmp	.+4      	; 0x85a <vfprintf+0x2d0>
 856:	1d 2d       	mov	r17, r13
 858:	01 c0       	rjmp	.+2      	; 0x85c <vfprintf+0x2d2>
 85a:	19 2d       	mov	r17, r9
 85c:	f4 fe       	sbrs	r15, 4
 85e:	0d c0       	rjmp	.+26     	; 0x87a <__stack+0x1b>
 860:	fe 01       	movw	r30, r28
 862:	ed 0d       	add	r30, r13
 864:	f1 1d       	adc	r31, r1
 866:	80 81       	ld	r24, Z
 868:	80 33       	cpi	r24, 0x30	; 48
 86a:	19 f4       	brne	.+6      	; 0x872 <__stack+0x13>
 86c:	99 ee       	ldi	r25, 0xE9	; 233
 86e:	f9 22       	and	r15, r25
 870:	08 c0       	rjmp	.+16     	; 0x882 <__stack+0x23>
 872:	1f 5f       	subi	r17, 0xFF	; 255
 874:	f2 fe       	sbrs	r15, 2
 876:	05 c0       	rjmp	.+10     	; 0x882 <__stack+0x23>
 878:	03 c0       	rjmp	.+6      	; 0x880 <__stack+0x21>
 87a:	8f 2d       	mov	r24, r15
 87c:	86 78       	andi	r24, 0x86	; 134
 87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
 880:	1f 5f       	subi	r17, 0xFF	; 255
 882:	0f 2d       	mov	r16, r15
 884:	f3 fc       	sbrc	r15, 3
 886:	14 c0       	rjmp	.+40     	; 0x8b0 <__stack+0x51>
 888:	f0 fe       	sbrs	r15, 0
 88a:	0f c0       	rjmp	.+30     	; 0x8aa <__stack+0x4b>
 88c:	1e 15       	cp	r17, r14
 88e:	10 f0       	brcs	.+4      	; 0x894 <__stack+0x35>
 890:	9d 2c       	mov	r9, r13
 892:	0b c0       	rjmp	.+22     	; 0x8aa <__stack+0x4b>
 894:	9d 2c       	mov	r9, r13
 896:	9e 0c       	add	r9, r14
 898:	91 1a       	sub	r9, r17
 89a:	1e 2d       	mov	r17, r14
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <__stack+0x4b>
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	b3 01       	movw	r22, r6
 8a4:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 8a8:	1f 5f       	subi	r17, 0xFF	; 255
 8aa:	1e 15       	cp	r17, r14
 8ac:	c0 f3       	brcs	.-16     	; 0x89e <__stack+0x3f>
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
 8b0:	1e 15       	cp	r17, r14
 8b2:	10 f4       	brcc	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	e1 1a       	sub	r14, r17
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	ee 24       	eor	r14, r14
 8ba:	04 ff       	sbrs	r16, 4
 8bc:	0f c0       	rjmp	.+30     	; 0x8dc <__stack+0x7d>
 8be:	80 e3       	ldi	r24, 0x30	; 48
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	b3 01       	movw	r22, r6
 8c4:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 8c8:	02 ff       	sbrs	r16, 2
 8ca:	1d c0       	rjmp	.+58     	; 0x906 <__stack+0xa7>
 8cc:	01 fd       	sbrc	r16, 1
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <__stack+0x77>
 8d0:	88 e7       	ldi	r24, 0x78	; 120
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e c0       	rjmp	.+28     	; 0x8f2 <__stack+0x93>
 8d6:	88 e5       	ldi	r24, 0x58	; 88
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0b c0       	rjmp	.+22     	; 0x8f2 <__stack+0x93>
 8dc:	80 2f       	mov	r24, r16
 8de:	86 78       	andi	r24, 0x86	; 134
 8e0:	91 f0       	breq	.+36     	; 0x906 <__stack+0xa7>
 8e2:	01 ff       	sbrs	r16, 1
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
 8e6:	8b e2       	ldi	r24, 0x2B	; 43
 8e8:	01 c0       	rjmp	.+2      	; 0x8ec <__stack+0x8d>
 8ea:	80 e2       	ldi	r24, 0x20	; 32
 8ec:	f7 fc       	sbrc	r15, 7
 8ee:	8d e2       	ldi	r24, 0x2D	; 45
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	b3 01       	movw	r22, r6
 8f4:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 8f8:	06 c0       	rjmp	.+12     	; 0x906 <__stack+0xa7>
 8fa:	80 e3       	ldi	r24, 0x30	; 48
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	b3 01       	movw	r22, r6
 900:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 904:	9a 94       	dec	r9
 906:	d9 14       	cp	r13, r9
 908:	c0 f3       	brcs	.-16     	; 0x8fa <__stack+0x9b>
 90a:	da 94       	dec	r13
 90c:	f1 01       	movw	r30, r2
 90e:	ed 0d       	add	r30, r13
 910:	f1 1d       	adc	r31, r1
 912:	80 81       	ld	r24, Z
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	b3 01       	movw	r22, r6
 918:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 91c:	dd 20       	and	r13, r13
 91e:	a9 f7       	brne	.-22     	; 0x90a <__stack+0xab>
 920:	06 c0       	rjmp	.+12     	; 0x92e <__stack+0xcf>
 922:	80 e2       	ldi	r24, 0x20	; 32
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	b3 01       	movw	r22, r6
 928:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 92c:	ea 94       	dec	r14
 92e:	ee 20       	and	r14, r14
 930:	c1 f7       	brne	.-16     	; 0x922 <__stack+0xc3>
 932:	43 ce       	rjmp	.-890    	; 0x5ba <vfprintf+0x30>
 934:	f3 01       	movw	r30, r6
 936:	66 81       	ldd	r22, Z+6	; 0x06
 938:	77 81       	ldd	r23, Z+7	; 0x07
 93a:	cb 01       	movw	r24, r22
 93c:	2b 96       	adiw	r28, 0x0b	; 11
 93e:	e2 e1       	ldi	r30, 0x12	; 18
 940:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__epilogue_restores__>

00000944 <strnlen_P>:
 944:	fc 01       	movw	r30, r24
 946:	05 90       	lpm	r0, Z+
 948:	61 50       	subi	r22, 0x01	; 1
 94a:	70 40       	sbci	r23, 0x00	; 0
 94c:	01 10       	cpse	r0, r1
 94e:	d8 f7       	brcc	.-10     	; 0x946 <strnlen_P+0x2>
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	8e 0f       	add	r24, r30
 956:	9f 1f       	adc	r25, r31
 958:	08 95       	ret

0000095a <strnlen>:
 95a:	fc 01       	movw	r30, r24
 95c:	61 50       	subi	r22, 0x01	; 1
 95e:	70 40       	sbci	r23, 0x00	; 0
 960:	01 90       	ld	r0, Z+
 962:	01 10       	cpse	r0, r1
 964:	d8 f7       	brcc	.-10     	; 0x95c <strnlen+0x2>
 966:	80 95       	com	r24
 968:	90 95       	com	r25
 96a:	8e 0f       	add	r24, r30
 96c:	9f 1f       	adc	r25, r31
 96e:	08 95       	ret

00000970 <fputc>:
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	8c 01       	movw	r16, r24
 97a:	eb 01       	movw	r28, r22
 97c:	8b 81       	ldd	r24, Y+3	; 0x03
 97e:	81 ff       	sbrs	r24, 1
 980:	1b c0       	rjmp	.+54     	; 0x9b8 <fputc+0x48>
 982:	82 ff       	sbrs	r24, 2
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <fputc+0x30>
 986:	2e 81       	ldd	r18, Y+6	; 0x06
 988:	3f 81       	ldd	r19, Y+7	; 0x07
 98a:	8c 81       	ldd	r24, Y+4	; 0x04
 98c:	9d 81       	ldd	r25, Y+5	; 0x05
 98e:	28 17       	cp	r18, r24
 990:	39 07       	cpc	r19, r25
 992:	64 f4       	brge	.+24     	; 0x9ac <fputc+0x3c>
 994:	e8 81       	ld	r30, Y
 996:	f9 81       	ldd	r31, Y+1	; 0x01
 998:	01 93       	st	Z+, r16
 99a:	f9 83       	std	Y+1, r31	; 0x01
 99c:	e8 83       	st	Y, r30
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <fputc+0x3c>
 9a0:	e8 85       	ldd	r30, Y+8	; 0x08
 9a2:	f9 85       	ldd	r31, Y+9	; 0x09
 9a4:	80 2f       	mov	r24, r16
 9a6:	09 95       	icall
 9a8:	89 2b       	or	r24, r25
 9aa:	31 f4       	brne	.+12     	; 0x9b8 <fputc+0x48>
 9ac:	8e 81       	ldd	r24, Y+6	; 0x06
 9ae:	9f 81       	ldd	r25, Y+7	; 0x07
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	9f 83       	std	Y+7, r25	; 0x07
 9b4:	8e 83       	std	Y+6, r24	; 0x06
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <fputc+0x4c>
 9b8:	0f ef       	ldi	r16, 0xFF	; 255
 9ba:	1f ef       	ldi	r17, 0xFF	; 255
 9bc:	c8 01       	movw	r24, r16
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	0f 91       	pop	r16
 9c6:	08 95       	ret

000009c8 <__ultoa_invert>:
 9c8:	fa 01       	movw	r30, r20
 9ca:	aa 27       	eor	r26, r26
 9cc:	28 30       	cpi	r18, 0x08	; 8
 9ce:	51 f1       	breq	.+84     	; 0xa24 <__ultoa_invert+0x5c>
 9d0:	20 31       	cpi	r18, 0x10	; 16
 9d2:	81 f1       	breq	.+96     	; 0xa34 <__ultoa_invert+0x6c>
 9d4:	e8 94       	clt
 9d6:	6f 93       	push	r22
 9d8:	6e 7f       	andi	r22, 0xFE	; 254
 9da:	6e 5f       	subi	r22, 0xFE	; 254
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	af 4f       	sbci	r26, 0xFF	; 255
 9e4:	b1 e0       	ldi	r27, 0x01	; 1
 9e6:	3e d0       	rcall	.+124    	; 0xa64 <__ultoa_invert+0x9c>
 9e8:	b4 e0       	ldi	r27, 0x04	; 4
 9ea:	3c d0       	rcall	.+120    	; 0xa64 <__ultoa_invert+0x9c>
 9ec:	67 0f       	add	r22, r23
 9ee:	78 1f       	adc	r23, r24
 9f0:	89 1f       	adc	r24, r25
 9f2:	9a 1f       	adc	r25, r26
 9f4:	a1 1d       	adc	r26, r1
 9f6:	68 0f       	add	r22, r24
 9f8:	79 1f       	adc	r23, r25
 9fa:	8a 1f       	adc	r24, r26
 9fc:	91 1d       	adc	r25, r1
 9fe:	a1 1d       	adc	r26, r1
 a00:	6a 0f       	add	r22, r26
 a02:	71 1d       	adc	r23, r1
 a04:	81 1d       	adc	r24, r1
 a06:	91 1d       	adc	r25, r1
 a08:	a1 1d       	adc	r26, r1
 a0a:	20 d0       	rcall	.+64     	; 0xa4c <__ultoa_invert+0x84>
 a0c:	09 f4       	brne	.+2      	; 0xa10 <__ultoa_invert+0x48>
 a0e:	68 94       	set
 a10:	3f 91       	pop	r19
 a12:	2a e0       	ldi	r18, 0x0A	; 10
 a14:	26 9f       	mul	r18, r22
 a16:	11 24       	eor	r1, r1
 a18:	30 19       	sub	r19, r0
 a1a:	30 5d       	subi	r19, 0xD0	; 208
 a1c:	31 93       	st	Z+, r19
 a1e:	de f6       	brtc	.-74     	; 0x9d6 <__ultoa_invert+0xe>
 a20:	cf 01       	movw	r24, r30
 a22:	08 95       	ret
 a24:	46 2f       	mov	r20, r22
 a26:	47 70       	andi	r20, 0x07	; 7
 a28:	40 5d       	subi	r20, 0xD0	; 208
 a2a:	41 93       	st	Z+, r20
 a2c:	b3 e0       	ldi	r27, 0x03	; 3
 a2e:	0f d0       	rcall	.+30     	; 0xa4e <__ultoa_invert+0x86>
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__ultoa_invert+0x5c>
 a32:	f6 cf       	rjmp	.-20     	; 0xa20 <__ultoa_invert+0x58>
 a34:	46 2f       	mov	r20, r22
 a36:	4f 70       	andi	r20, 0x0F	; 15
 a38:	40 5d       	subi	r20, 0xD0	; 208
 a3a:	4a 33       	cpi	r20, 0x3A	; 58
 a3c:	18 f0       	brcs	.+6      	; 0xa44 <__ultoa_invert+0x7c>
 a3e:	49 5d       	subi	r20, 0xD9	; 217
 a40:	31 fd       	sbrc	r19, 1
 a42:	40 52       	subi	r20, 0x20	; 32
 a44:	41 93       	st	Z+, r20
 a46:	02 d0       	rcall	.+4      	; 0xa4c <__ultoa_invert+0x84>
 a48:	a9 f7       	brne	.-22     	; 0xa34 <__ultoa_invert+0x6c>
 a4a:	ea cf       	rjmp	.-44     	; 0xa20 <__ultoa_invert+0x58>
 a4c:	b4 e0       	ldi	r27, 0x04	; 4
 a4e:	a6 95       	lsr	r26
 a50:	97 95       	ror	r25
 a52:	87 95       	ror	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	ba 95       	dec	r27
 a5a:	c9 f7       	brne	.-14     	; 0xa4e <__ultoa_invert+0x86>
 a5c:	00 97       	sbiw	r24, 0x00	; 0
 a5e:	61 05       	cpc	r22, r1
 a60:	71 05       	cpc	r23, r1
 a62:	08 95       	ret
 a64:	9b 01       	movw	r18, r22
 a66:	ac 01       	movw	r20, r24
 a68:	0a 2e       	mov	r0, r26
 a6a:	06 94       	lsr	r0
 a6c:	57 95       	ror	r21
 a6e:	47 95       	ror	r20
 a70:	37 95       	ror	r19
 a72:	27 95       	ror	r18
 a74:	ba 95       	dec	r27
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__ultoa_invert+0xa2>
 a78:	62 0f       	add	r22, r18
 a7a:	73 1f       	adc	r23, r19
 a7c:	84 1f       	adc	r24, r20
 a7e:	95 1f       	adc	r25, r21
 a80:	a0 1d       	adc	r26, r0
 a82:	08 95       	ret

00000a84 <__prologue_saves__>:
 a84:	2f 92       	push	r2
 a86:	3f 92       	push	r3
 a88:	4f 92       	push	r4
 a8a:	5f 92       	push	r5
 a8c:	6f 92       	push	r6
 a8e:	7f 92       	push	r7
 a90:	8f 92       	push	r8
 a92:	9f 92       	push	r9
 a94:	af 92       	push	r10
 a96:	bf 92       	push	r11
 a98:	cf 92       	push	r12
 a9a:	df 92       	push	r13
 a9c:	ef 92       	push	r14
 a9e:	ff 92       	push	r15
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
 aac:	ca 1b       	sub	r28, r26
 aae:	db 0b       	sbc	r29, r27
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	f8 94       	cli
 ab4:	de bf       	out	0x3e, r29	; 62
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	cd bf       	out	0x3d, r28	; 61
 aba:	09 94       	ijmp

00000abc <__epilogue_restores__>:
 abc:	2a 88       	ldd	r2, Y+18	; 0x12
 abe:	39 88       	ldd	r3, Y+17	; 0x11
 ac0:	48 88       	ldd	r4, Y+16	; 0x10
 ac2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac8:	8c 84       	ldd	r8, Y+12	; 0x0c
 aca:	9b 84       	ldd	r9, Y+11	; 0x0b
 acc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ace:	b9 84       	ldd	r11, Y+9	; 0x09
 ad0:	c8 84       	ldd	r12, Y+8	; 0x08
 ad2:	df 80       	ldd	r13, Y+7	; 0x07
 ad4:	ee 80       	ldd	r14, Y+6	; 0x06
 ad6:	fd 80       	ldd	r15, Y+5	; 0x05
 ad8:	0c 81       	ldd	r16, Y+4	; 0x04
 ada:	1b 81       	ldd	r17, Y+3	; 0x03
 adc:	aa 81       	ldd	r26, Y+2	; 0x02
 ade:	b9 81       	ldd	r27, Y+1	; 0x01
 ae0:	ce 0f       	add	r28, r30
 ae2:	d1 1d       	adc	r29, r1
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	f8 94       	cli
 ae8:	de bf       	out	0x3e, r29	; 62
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	cd bf       	out	0x3d, r28	; 61
 aee:	ed 01       	movw	r28, r26
 af0:	08 95       	ret

00000af2 <_exit>:
 af2:	f8 94       	cli

00000af4 <__stop_program>:
 af4:	ff cf       	rjmp	.-2      	; 0xaf4 <__stop_program>
