
portC_with_switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059d  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f6  00000000  00000000  00001537  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRA &= ~(1<<0);
  6c:	d0 98       	cbi	0x1a, 0	; 26
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //Set Data_Direction_Resistor_Of_PORTD_Bit_7
  6e:	84 b3       	in	r24, 0x14	; 20
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
		{
			_delay_us(10);
			//PORTC |= (1<<0);
			for (i=0;i<=7;i++)
			{
				PORTC |= (1<<i); //PORTD goes to HIGH.
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	70 e0       	ldi	r23, 0x00	; 0
	DDRC |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)); //Set Data_Direction_Resistor_Of_PORTD_Bit_7
	int i=0;
	while(1)
	{
		
		if(bit_is_clear(PIND,3))
  78:	83 99       	sbic	0x10, 3	; 16
  7a:	27 c0       	rjmp	.+78     	; 0xca <main+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	8a e1       	ldi	r24, 0x1A	; 26
  7e:	8a 95       	dec	r24
  80:	f1 f7       	brne	.-4      	; 0x7e <main+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
		{
			_delay_us(10);
			//PORTC |= (1<<0);
			for (i=0;i<=7;i++)
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
			{
				PORTC |= (1<<i); //PORTD goes to HIGH.
  88:	45 b3       	in	r20, 0x15	; 21
  8a:	cb 01       	movw	r24, r22
  8c:	02 2e       	mov	r0, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x24>
  98:	94 2f       	mov	r25, r20
  9a:	98 2b       	or	r25, r24
  9c:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	fa ee       	ldi	r31, 0xEA	; 234
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
				
				_delay_ms(30); //Wait for 100ms
				
				PORTC &= ~(1<<i); //PORTD goes to LOW.
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	80 95       	com	r24
  ae:	89 23       	and	r24, r25
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	8f e5       	ldi	r24, 0x5F	; 95
  b4:	9a ee       	ldi	r25, 0xEA	; 234
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
		
		if(bit_is_clear(PIND,3))
		{
			_delay_us(10);
			//PORTC |= (1<<0);
			for (i=0;i<=7;i++)
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	28 30       	cpi	r18, 0x08	; 8
  c4:	31 05       	cpc	r19, r1
  c6:	01 f7       	brne	.-64     	; 0x88 <main+0x1c>
  c8:	01 c0       	rjmp	.+2      	; 0xcc <main+0x60>
			}
			i=0;
		}
		else
		{
			PORTC &= ~(1<<0);
  ca:	a8 98       	cbi	0x15, 0	; 21
		}
		
		if(bit_is_clear(PIND,2))
  cc:	82 99       	sbic	0x10, 2	; 16
  ce:	25 c0       	rjmp	.+74     	; 0x11a <main+0xae>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	9a e1       	ldi	r25, 0x1A	; 26
  d2:	9a 95       	dec	r25
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x66>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
		{
			_delay_us(10);
			//PORTC |= (1<<0);
			for (i=7;i>=0;i--)
  d8:	27 e0       	ldi	r18, 0x07	; 7
  da:	30 e0       	ldi	r19, 0x00	; 0
			{
				PORTC |= (1<<i); //PORTD goes to HIGH.
  dc:	45 b3       	in	r20, 0x15	; 21
  de:	cb 01       	movw	r24, r22
  e0:	02 2e       	mov	r0, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x78>
  ec:	94 2f       	mov	r25, r20
  ee:	98 2b       	or	r25, r24
  f0:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ef e5       	ldi	r30, 0x5F	; 95
  f4:	fa ee       	ldi	r31, 0xEA	; 234
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x8a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x90>
  fc:	00 00       	nop
				
				_delay_ms(30); //Wait for 100ms
				
				PORTC &= ~(1<<i); //PORTD goes to LOW.
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	80 95       	com	r24
 102:	89 23       	and	r24, r25
 104:	85 bb       	out	0x15, r24	; 21
 106:	8f e5       	ldi	r24, 0x5F	; 95
 108:	9a ee       	ldi	r25, 0xEA	; 234
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x9e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0xa4>
 110:	00 00       	nop
		
		if(bit_is_clear(PIND,2))
		{
			_delay_us(10);
			//PORTC |= (1<<0);
			for (i=7;i>=0;i--)
 112:	21 50       	subi	r18, 0x01	; 1
 114:	31 09       	sbc	r19, r1
 116:	10 f7       	brcc	.-60     	; 0xdc <main+0x70>
 118:	af cf       	rjmp	.-162    	; 0x78 <main+0xc>
			}
			i=0;
		}
		else
		{
			PORTC &= ~(1<<0);
 11a:	a8 98       	cbi	0x15, 0	; 21
 11c:	ad cf       	rjmp	.-166    	; 0x78 <main+0xc>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
